import java.io.FileOutputStream;
import java.util.List;

import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.TextAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 * @author AleksandrovichK
 */
public class Main {
    private static XWPFDocument docxModel = new XWPFDocument();

    public static void main(String[] args) {
        try {
            // TODO Брать целую папку с классами, а не отдельный файл
            Parser parser = new Parser();
            RestClass restClass = parser.parseJavaClass("/SubscriberCardRestService.java");
            List<String> pathes = parser.parseRestPathes("/RestApiEndpoints.java");
            List<Service> services = restClass.getServices();

            XWPFParagraph tableHeader = docxModel.createParagraph();
            tableHeader.setAlignment(ParagraphAlignment.CENTER);
            XWPFRun tableHeaderRun = tableHeader.createRun();
            tableHeaderRun.setFontSize(20);
            tableHeaderRun.setFontFamily("Microsoft JhengHei UI Light");
            tableHeaderRun.setColor("1F4E79");
            tableHeaderRun.setText("Службы тарифных планов");

            XWPFTable tableX = docxModel.createTable(services.size(), 3);

            XWPFTableRow header = tableX.getRow(0);
            headerCell(header, 0, "1250", "Тип");
            headerCell(header, 1, "4000", "URL");
            headerCell(header, 2, "4000", "Описание");

            for (int i = 1; i < services.size(); i++) {
                XWPFTableRow row2 = tableX.getRow(i);
                tableCell(row2, 0, services.get(i).url);
                tableCell(row2, 1, "/rest/path/suck");
                tableCell(row2, 2, "Сервис для очередной бурды");
            }

            // сохраняем модель docx документа в файл
            FileOutputStream outputStream = new FileOutputStream("E:/Work/Workspace3/JavaAdvancedDoc/Autogenerated JAD.docx");
            docxModel.write(outputStream);
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Успешно записан в файл");
    }

    private static void headerCell(XWPFTableRow header, int position, String width, String text) {
        header.getCell(position).setColor("BFBFBF");
        header.getCell(position).setWidth(width);

        XWPFParagraph par = header.getCell(position).addParagraph();
        par.setAlignment(ParagraphAlignment.CENTER);
        par.setVerticalAlignment(TextAlignment.CENTER);

        XWPFRun run = par.createRun();
        run.setColor("000000");
        run.setFontFamily("Microsoft JhengHei UI Light");
        run.setText(text);
        run.setBold(true);
    }

    private static void tableCell(XWPFTableRow row, int position, String text) {
        XWPFParagraph par = row.getCell(position).addParagraph();
        XWPFRun run = par.createRun();
        run.setFontFamily("Microsoft JhengHei UI Light");

        switch (position) {
            case 0: {

                switch (text) {
                    case "@GET": {
                        row.getCell(position).setColor("DAFAF9");
                        run.setText("GET");
                        break;
                    }
                    case "@POST": {
                        row.getCell(position).setColor("FFF7DD");
                        run.setText("POST");
                        break;
                    }
                    case "@PUT": {
                        row.getCell(position).setColor("DAE8FE");
                        run.setText("PUT");
                        break;
                    }
                    case "@DELETE": {
                        row.getCell(position).setColor("FFE7E8");
                        run.setText("DELETE");
                        break;
                    }
                }
                par.setAlignment(ParagraphAlignment.CENTER);
                par.setVerticalAlignment(TextAlignment.CENTER);
                break;
            }
            case 1: {
                row.getCell(position).setColor("FFFFFF");
                par.setAlignment(ParagraphAlignment.LEFT);
                par.setVerticalAlignment(TextAlignment.CENTER);
                run.setText(text);
                break;
            }
            case 2: {
                row.getCell(position).setColor("FFFFFF");
                par.setAlignment(ParagraphAlignment.CENTER);
                par.setVerticalAlignment(TextAlignment.CENTER);
                run.setText(text);
                break;
            }
        }
    }
}
